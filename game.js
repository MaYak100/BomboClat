// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Ç–∞–π–º–∏–Ω–≥–æ–≤
const TIMINGS = {
    BOMB_PREVIEW: 1000,        // –ü–æ–∫–∞–∑ –ø—Ä–µ–≤—å—é –±–æ–º–±—ã
    CARD_FLIP: 600,            // –ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
    THEME_TRANSITION: 1200,    // –ê–Ω–∏–º–∞—Ü–∏—è –≤–æ–ª–Ω—ã —Ç–µ–º—ã
    CLICK_UNBLOCK: 1000,       // –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã —Ç–µ–º—ã
    PLACE_TO_GUESS_DELAY: 1700, // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–º–µ–Ω–æ–π —Ñ–∞–∑—ã
    ROUND_END_DELAY: 2500,     // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º —Ä–∞—É–Ω–¥–æ–º
    END_ROUND_INITIAL: 800     // –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ –∫–æ–Ω—Ü–µ —Ä–∞—É–Ω–¥–∞
};

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
const gameState = {
    currentScreen: 'lobby',
    gameMode: null, // 'offline' –∏–ª–∏ 'online'
    roomCode: null,
    playerName: '–ì–æ—Å—Ç—å',
    playerRole: null, // 'player1' –∏–ª–∏ 'player2'
    roomRef: null,
    isTransitioning: false, // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–ª–∏–∫–æ–≤ –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
    isTransitioningTheme: false, // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–ª–Ω—ã
    lastGamePhase: null, // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–º–µ–Ω—ã —Ñ–∞–∑—ã
    activeTimeouts: [], // –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
    opponentDisconnectHandled: false, // –§–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    roundEndProcessed: false, // –§–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ü–∞ —Ä–∞—É–Ω–¥–∞
    // –û—Ñ—Ñ–ª–∞–π–Ω —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    offlineState: {
        gamePhase: 'placing_bombs',
        bombs: [],
        selectedCells: [],
        currentPlayer: 1,
        scores: { player1: 0, player2: 0 }
    }
};

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const screens = {
    lobby: document.getElementById('lobby-screen'),
    waiting: document.getElementById('waiting-screen'),
    game: document.getElementById('game-screen')
};

const elements = {
    // –õ–æ–±–±–∏
    modeSelection: document.getElementById('mode-selection'),
    offlineBtn: document.getElementById('offline-btn'),
    onlineBtn: document.getElementById('online-btn'),
    onlineOptions: document.getElementById('online-options'),
    backToModeBtn: document.getElementById('back-to-mode-btn'),
    // –û–Ω–ª–∞–π–Ω
    nicknameInput: document.getElementById('nickname-input'),
    roomCodeInput: document.getElementById('room-code-input'),
    createRoomBtn: document.getElementById('create-room-btn'),
    joinRoomBtn: document.getElementById('join-room-btn'),
    leaveRoomBtn: document.getElementById('leave-room-btn'),
    displayRoomCode: document.getElementById('display-room-code'),
    // –ò–≥—Ä–∞
    leaveGameBtn: document.getElementById('leave-game-btn'),
    gameBoard: document.getElementById('game-board'),
    gameStatus: document.getElementById('game-status'),
    leftPlayerInfo: document.getElementById('left-player'),
    rightPlayerInfo: document.getElementById('right-player'),
    leftPlayerName: document.getElementById('left-player-name'),
    rightPlayerName: document.getElementById('right-player-name'),
    leftPlayerScore: document.getElementById('left-player-score'),
    rightPlayerScore: document.getElementById('right-player-score'),
    // –≠—Ñ—Ñ–µ–∫—Ç—ã
    themeWave: document.getElementById('theme-wave')
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
function init() {
    createGameBoard();
    attachEventListeners();
    // –ù–∞—á–∏–Ω–∞–µ–º —Å light —Ç–µ–º—ã
    setTheme('light');
}

// –°–º–µ–Ω–∞ —Ç–µ–º—ã —Å –≤–æ–ª–Ω–æ–≤—ã–º —ç—Ñ—Ñ–µ–∫—Ç–æ–º
function setTheme(theme) {
    if (theme === 'light') {
        document.body.classList.add('light-theme');
    } else {
        document.body.classList.remove('light-theme');
    }
}

function transitionTheme(fromTheme, toTheme) {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –≤–æ–ª–Ω—ã –≤ —Ü–≤–µ—Ç –Ω–æ–≤–æ–π —Ç–µ–º—ã
    elements.themeWave.className = 'theme-wave ' + toTheme;

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∫—Ä—É–≥–∞
    setTimeout(() => {
        elements.themeWave.classList.add('expanding');
    }, 10);

    // –ú–µ–Ω—è–µ–º —Ç–µ–º—É –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Å –Ω–∞—á–∞–ª–æ–º –≤–æ–ª–Ω—ã –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    setTimeout(() => {
        setTheme(toTheme);
    }, 50);

    // –£–±–∏—Ä–∞–µ–º –≤–æ–ª–Ω—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (1.2s –∞–Ω–∏–º–∞—Ü–∏—è)
    setTimeout(() => {
        elements.themeWave.classList.remove('expanding');
        setTimeout(() => {
            elements.themeWave.className = 'theme-wave';
        }, 100);
    }, 1300);
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
function createGameBoard() {
    elements.gameBoard.innerHTML = '';
    for (let i = 0; i < 9; i++) {
        const card = document.createElement('div');
        card.className = 'card hoverable wobble';
        card.dataset.index = i;

        card.innerHTML = `
            <div class="card-inner">
                <div class="card-face card-front"></div>
                <div class="card-face card-back"></div>
            </div>
        `;

        card.addEventListener('click', () => handleCardClick(i));
        elements.gameBoard.appendChild(card);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
function updateCardClasses(room = null) {
    const cards = document.querySelectorAll('.card');

    if (gameState.gameMode === 'offline') {
        // –í –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã (hoverable + wobble)
        cards.forEach(card => {
            if (!card.classList.contains('flipped')) {
                card.classList.add('hoverable', 'wobble');
                card.classList.remove('locked');
            }
        });
    } else if (gameState.gameMode === 'online' && room) {
        // –í –æ–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ–π —Ö–æ–¥
        const isMyTurn = (room.currentPlayer === 1 && gameState.playerRole === 'player1') ||
                       (room.currentPlayer === 2 && gameState.playerRole === 'player2');

        cards.forEach(card => {
            if (!card.classList.contains('flipped')) {
                if (isMyTurn) {
                    card.classList.add('hoverable', 'wobble');
                    card.classList.remove('locked');
                } else {
                    card.classList.remove('hoverable', 'wobble');
                    card.classList.add('locked');
                }
            }
        });
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
function attachEventListeners() {
    // –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞
    elements.offlineBtn.addEventListener('click', startOfflineGame);
    elements.onlineBtn.addEventListener('click', showOnlineOptions);
    elements.backToModeBtn.addEventListener('click', backToModeSelection);

    // –û–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º
    elements.createRoomBtn.addEventListener('click', createRoom);
    elements.joinRoomBtn.addEventListener('click', joinRoom);
    elements.leaveRoomBtn.addEventListener('click', leaveRoom);
    elements.leaveGameBtn.addEventListener('click', leaveGame);
}

// ========== –†–ï–ñ–ò–ú–´ –ò–ì–†–´ ==========

// –û—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º
function startOfflineGame() {
    gameState.gameMode = 'offline';
    gameState.offlineState.gamePhase = 'placing_bombs';
    gameState.offlineState.bombs = [];
    gameState.offlineState.selectedCells = [];
    gameState.offlineState.currentPlayer = 1;

    showScreen('game');
    updatePlayersDisplay();
    updateStatus('üí£ –ó–∞–º–∏–Ω–∏—Ä—É–π 2 –∫–ª–µ—Ç–∫–∏');
}

// –ü–æ–∫–∞–∑–∞—Ç—å –æ–Ω–ª–∞–π–Ω –æ–ø—Ü–∏–∏
function showOnlineOptions() {
    elements.modeSelection.style.display = 'none';
    elements.onlineOptions.classList.add('expanded');
}

// –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞
function backToModeSelection() {
    elements.onlineOptions.classList.remove('expanded');
    setTimeout(() => {
        elements.modeSelection.style.display = 'flex';
    }, 400);
}

// ========== FIREBASE –§–£–ù–ö–¶–ò–ò ==========

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
async function createRoom() {
    const nickname = elements.nicknameInput.value.trim() || '–ì–æ—Å—Ç—å';
    const roomCode = generateRoomCode();

    gameState.gameMode = 'online';
    gameState.playerName = nickname;
    gameState.roomCode = roomCode;
    gameState.playerRole = 'player1';

    // –°–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É –≤ Firebase
    const roomData = {
        player1: { name: nickname, connected: true },
        player2: null,
        gamePhase: 'waiting',
        bombs: [],
        selectedCells: [],
        flippedCards: [],
        flippedPreview: [],
        currentPlayer: 1,
        scores: { player1: 0, player2: 0 },
        showBombMessage: false,
        roundEndTriggered: false,
        roundWinner: null
    };

    gameState.roomRef = database.ref('rooms/' + roomCode);
    await gameState.roomRef.set(roomData);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º presence - —É–¥–∞–ª—è–µ–º player1 –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
    gameState.roomRef.child('player1/connected').onDisconnect().set(false);

    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
    listenToRoom();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º lastGamePhase
    gameState.lastGamePhase = 'waiting';

    showScreen('waiting');
    elements.displayRoomCode.textContent = roomCode;
}

// –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ
async function joinRoom() {
    const nickname = elements.nicknameInput.value.trim() || '–ì–æ—Å—Ç—å';
    const roomCode = elements.roomCodeInput.value.trim();

    if (roomCode.length !== 4 || !/^\d{4}$/.test(roomCode)) {
        alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã (4 —Ü–∏—Ñ—Ä—ã)');
        return;
    }

    try {
        gameState.roomRef = database.ref('rooms/' + roomCode);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º transaction –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç race condition
        const result = await gameState.roomRef.child('player2').transaction((current) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–Ω–æ –ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–µ—Å—Ç–∞ –Ω–µ—Ç –≤–æ–æ–±—â–µ)
            if (current === null) {
                // –ú–µ—Å—Ç–æ —Å–≤–æ–±–æ–¥–Ω–æ
                return { name: nickname, connected: true };
            }
            // –ú–µ—Å—Ç–æ –∑–∞–Ω—è—Ç–æ - –æ—Ç–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            return undefined;
        });

        if (!result.committed) {
            alert('–ö–æ–º–Ω–∞—Ç–∞ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞');
            gameState.roomRef = null;
            return;
        }

        gameState.gameMode = 'online';
        gameState.playerName = nickname;
        gameState.roomCode = roomCode;
        gameState.playerRole = 'player2';

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–∑—É –∏–≥—Ä—ã
        await gameState.roomRef.child('gamePhase').set('placing_bombs');

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º presence
        gameState.roomRef.child('player2/connected').onDisconnect().set(false);

        // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
        listenToRoom();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –∫–æ–º–Ω–∞—Ç–µ:', error);
        alert('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        gameState.roomRef = null;
    }
}

// –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–º–Ω–∞—Ç–µ
function listenToRoom() {
    gameState.roomRef.on('value', (snapshot) => {
        const room = snapshot.val();

        if (!room) {
            // –ö–æ–º–Ω–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞ - –≤—ã—Ö–æ–¥–∏–º
            alert('–ö–æ–º–Ω–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞');
            leaveRoom();
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
        const opponentDisconnected = 
            (gameState.playerRole === 'player1' && room.player2 && !room.player2.connected) ||
            (gameState.playerRole === 'player2' && room.player1 && !room.player1.connected);

        if (opponentDisconnected) {
            // –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –æ—Ç–∫–ª—é—á–∏–ª—Å—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–±–µ–¥—É
            handleOpponentDisconnect(room);
        } else {
            // –û–±–Ω–æ–≤–ª—è–µ–º UI –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
            updateGameFromRoom(room);
        }
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
function handleOpponentDisconnect(room) {
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
    if (gameState.opponentDisconnectHandled) return;
    gameState.opponentDisconnectHandled = true;
    
    // –ë–ª–æ–∫–∏—Ä—É–µ–º –∏–≥—Ä—É
    gameState.isTransitioning = true;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    const winnerName = gameState.playerRole === 'player1' 
        ? room.player1?.name || '–ò–≥—Ä–æ–∫ 1'
        : room.player2?.name || '–ò–≥—Ä–æ–∫ 2';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
    updateStatus('‚ö†Ô∏è –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –æ—Ç–∫–ª—é—á–∏–ª—Å—è');
    
    // –ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    const timeoutId = setTimeout(() => {
        updateStatus(`üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${winnerName}`);
        
        // –ß–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –ª–æ–±–±–∏
        const timeoutId2 = setTimeout(() => {
            leaveRoom();
        }, 3000);
        gameState.activeTimeouts.push(timeoutId2);
    }, 2000);
    gameState.activeTimeouts.push(timeoutId);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä—ã –∏–∑ Firebase
function updateGameFromRoom(room) {
    // –ï—Å–ª–∏ –≤—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è - –Ω–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É (–¥–ª—è –æ–±–æ–∏—Ö –∏–≥—Ä–æ–∫–æ–≤)
    if (room.player2 && room.gamePhase !== 'waiting' && gameState.currentScreen !== 'game') {
        showScreen('game');
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º lastGamePhase –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        gameState.lastGamePhase = room.gamePhase;
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ç–µ–º—É –ø—Ä–∏ –≤—Ö–æ–¥–µ
        const expectedTheme = (room.gamePhase === 'placing_bombs' || room.gamePhase === 'waiting') ? 'light' : 'dark';
        setTheme(expectedTheme);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º UI
    if (gameState.currentScreen === 'game') {
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏—Å–ø–ª–µ–π –∏–≥—Ä–æ–∫–æ–≤ (–Ø —Å–ª–µ–≤–∞, –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ —Å–ø—Ä–∞–≤–∞)
        updatePlayersDisplay(room);

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–±—Ä–æ—Å –¥–æ—Å–∫–∏
        if (room.gamePhase === 'resetting') {
            resetBoardVisual();
            return; // –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω–æ–µ –≤–æ –≤—Ä–µ–º—è —Å–±—Ä–æ—Å–∞
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–ë–æ–º–±–∞!" –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ –ø–æ–ø–∞–ª –Ω–∞ –±–æ–º–±—É
        if (room.showBombMessage && room.gamePhase === 'guessing') {
            updateStatus('üí• –ë–æ–º–±–∞!');
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞—É–Ω–¥–∞ (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
        if (room.roundEndTriggered && room.gamePhase === 'guessing' && !gameState.roundEndProcessed) {
            gameState.roundEndProcessed = true;
            gameState.isTransitioning = true;
            const bombs = room.bombs || [];
            const won = room.roundWinner;
            const timeoutId = setTimeout(() => endRoundOnline(won, bombs), TIMINGS.END_ROUND_INITIAL);
            gameState.activeTimeouts.push(timeoutId);
        }

        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–º–µ–Ω—É —Ñ–∞–∑—ã –¥–ª—è –≤–æ–ª–Ω–æ–≤–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
        const phaseChanged = gameState.lastGamePhase && gameState.lastGamePhase !== room.gamePhase;
        
        if (phaseChanged) {
            // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥—Ä—É–≥–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
            if (!gameState.isTransitioningTheme) {
                // placing_bombs ‚Üí guessing: light ‚Üí dark
                if (gameState.lastGamePhase === 'placing_bombs' && room.gamePhase === 'guessing') {
                    gameState.isTransitioning = true;
                    gameState.isTransitioningTheme = true;
                    transitionTheme('light', 'dark');
                    const timeoutId = setTimeout(() => {
                        gameState.isTransitioning = false;
                        gameState.isTransitioningTheme = false;
                    }, TIMINGS.CLICK_UNBLOCK);
                    gameState.activeTimeouts.push(timeoutId);
                }
                // resetting ‚Üí placing_bombs: dark ‚Üí light
                // –ò–õ–ò round_end ‚Üí placing_bombs (–µ—Å–ª–∏ resetting –ø—Ä–æ–ø—É—â–µ–Ω)
                else if ((gameState.lastGamePhase === 'resetting' || gameState.lastGamePhase === 'round_end') 
                         && room.gamePhase === 'placing_bombs') {
                    gameState.isTransitioning = true;
                    gameState.isTransitioningTheme = true;
                    transitionTheme('dark', 'light');
                    const timeoutId = setTimeout(() => {
                        gameState.isTransitioning = false;
                        gameState.isTransitioningTheme = false;
                    }, TIMINGS.CLICK_UNBLOCK);
                    gameState.activeTimeouts.push(timeoutId);
                }
                // –õ—é–±–∞—è –¥—Ä—É–≥–∞—è —Å–º–µ–Ω–∞ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
                else {
                    gameState.isTransitioning = false;
                }
            }
            
            // –í–ê–ñ–ù–û: –æ–±–Ω–æ–≤–ª—è–µ–º lastGamePhase –í–°–ï–ì–î–ê –ø—Ä–∏ —Å–º–µ–Ω–µ (–≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç isTransitioningTheme)
            gameState.lastGamePhase = room.gamePhase;
        } else if (!gameState.lastGamePhase) {
            // –ü–µ—Ä–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            gameState.lastGamePhase = room.gamePhase;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        updateStatusFromPhase(room);

        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é –±–æ–º–± (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ø —Ä–∞–∑–º–µ—â–∞—é - –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —á—Ç–æ –≤—ã–±—Ä–∞–ª)
        const isMyTurn = (room.currentPlayer === 1 && gameState.playerRole === 'player1') ||
                        (room.currentPlayer === 2 && gameState.playerRole === 'player2');
        if (isMyTurn && room.gamePhase === 'placing_bombs') {
            syncFlippedPreview(room.flippedPreview || []);
        }

        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç—ã –∫–∞—Ä—Ç–æ—á–µ–∫ (—Ç–æ–ª—å–∫–æ –≤ —Ñ–∞–∑–∞—Ö guessing –∏ round_end)
        if (room.gamePhase === 'guessing' || room.gamePhase === 'round_end') {
            syncFlippedCards(room.flippedCards || []);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞—Å—Å—ã –∫–∞—Ä—Ç–æ—á–µ–∫ (–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞)
        updateCardClasses(room);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏—Å–ø–ª–µ—è –∏–≥—Ä–æ–∫–æ–≤ (–Ø —Å–ª–µ–≤–∞, –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ —Å–ø—Ä–∞–≤–∞)
function updatePlayersDisplay(room = null) {
    if (gameState.gameMode === 'offline') {
        const state = gameState.offlineState;
        const currentPlayer = state.currentPlayer;
        
        // –ò–≥—Ä–æ–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –Ω–∞ —Å–≤–æ–∏—Ö –º–µ—Å—Ç–∞—Ö
        elements.leftPlayerName.textContent = '–ò–≥—Ä–æ–∫ 1';
        elements.rightPlayerName.textContent = '–ò–≥—Ä–æ–∫ 2';
        elements.leftPlayerScore.textContent = state.scores.player1;
        elements.rightPlayerScore.textContent = state.scores.player2;
        
        // –†–∞–º–∫–∞ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, —á–µ–π —Ö–æ–¥
        const isPlaying = state.gamePhase === 'placing_bombs' || state.gamePhase === 'guessing';
        if (isPlaying) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–º–∫—É —É —Ç–æ–≥–æ, –∫—Ç–æ —Ö–æ–¥–∏—Ç
            elements.leftPlayerInfo.classList.toggle('active', currentPlayer === 1);
            elements.rightPlayerInfo.classList.toggle('active', currentPlayer === 2);
        } else {
            // –£–±–∏—Ä–∞–µ–º –æ–±–µ —Ä–∞–º–∫–∏ –≤ –∫–æ–Ω—Ü–µ —Ä–∞—É–Ω–¥–∞
            elements.leftPlayerInfo.classList.remove('active');
            elements.rightPlayerInfo.classList.remove('active');
        }
    } else if (gameState.gameMode === 'online' && room) {
        // –Ø —Å–ª–µ–≤–∞, –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ —Å–ø—Ä–∞–≤–∞
        if (gameState.playerRole === 'player1') {
            elements.leftPlayerName.textContent = room.player1?.name || '–í—ã';
            elements.rightPlayerName.textContent = room.player2?.name || '–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫';
            elements.leftPlayerScore.textContent = room.scores.player1;
            elements.rightPlayerScore.textContent = room.scores.player2;
        } else {
            elements.leftPlayerName.textContent = room.player2?.name || '–í—ã';
            elements.rightPlayerName.textContent = room.player1?.name || '–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫';
            elements.leftPlayerScore.textContent = room.scores.player2;
            elements.rightPlayerScore.textContent = room.scores.player1;
        }
        
        // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —á–µ–π —Ö–æ–¥
        const isMyTurn = (room.currentPlayer === 1 && gameState.playerRole === 'player1') ||
                        (room.currentPlayer === 2 && gameState.playerRole === 'player2');
        elements.leftPlayerInfo.classList.toggle('active', isMyTurn);
        elements.rightPlayerInfo.classList.toggle('active', !isMyTurn);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å —ç–º–æ–¥–∑–∏
function updateStatusFromPhase(room) {
    const isMyTurn = (room.currentPlayer === 1 && gameState.playerRole === 'player1') ||
                     (room.currentPlayer === 2 && gameState.playerRole === 'player2');

    if (room.gamePhase === 'waiting') {
        updateStatus('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞...');
    } else if (room.gamePhase === 'placing_bombs') {
        if (isMyTurn) {
            updateStatus('üí£ –ó–∞–º–∏–Ω–∏—Ä—É–π 2 –∫–ª–µ—Ç–∫–∏');
        } else {
            updateStatus('‚è≥ –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –º–∏–Ω–∏—Ä—É–µ—Ç –ø–æ–ª–µ...');
        }
    } else if (room.gamePhase === 'guessing') {
        if (isMyTurn) {
            updateStatus('üéØ –ù–∞–π–¥–∏ 3 –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö!');
        } else {
            updateStatus('üëÄ –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –¥–µ–ª–∞–µ—Ç —Ö–æ–¥...');
        }
    } else if (room.gamePhase === 'round_end') {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ
        const iWon = (room.winner && isMyTurn) || (!room.winner && !isMyTurn);
        updateStatus(iWon ? 'üéâ –ü–æ–±–µ–¥–∞!' : 'üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–µ!');
    }
}

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–µ–≤—å—é –±–æ–º–± –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞
function syncFlippedPreview(flippedPreview) {
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã–µ –ø—Ä–µ–≤—å—é —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å
    if (!gameState.shownPreviews) gameState.shownPreviews = new Set();
    
    flippedPreview.forEach(index => {
        if (!gameState.shownPreviews.has(index)) {
            const card = document.querySelector(`[data-index="${index}"]`);
            if (card && !card.classList.contains('animating')) {
                flipBombPreview(index);
                gameState.shownPreviews.add(index);
            }
        }
    });
    
    // –û—á–∏—â–∞–µ–º –µ—Å–ª–∏ preview –ø—É—Å—Ç–æ–π (–Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥)
    if (flippedPreview.length === 0) {
        gameState.shownPreviews.clear();
    }
}

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
function syncFlippedCards(flippedCards) {
    flippedCards.forEach(cardData => {
        const card = document.querySelector(`[data-index="${cardData.index}"]`);
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–∞—Ä—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –µ—â–µ –Ω–µ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞ –∏ –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–Ω–∏–º–∞—Ü–∏–∏
        if (card && !card.classList.contains('flipped') && !card.classList.contains('animating')) {
            flipCardVisual(cardData.index, cardData.isBomb);
        }
    });
}

// ========== –ò–ì–†–û–í–ê–Ø –õ–û–ì–ò–ö–ê ==========

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ
async function handleCardClick(index) {
    if (gameState.gameMode === 'offline') {
        handleOfflineClick(index);
    } else if (gameState.gameMode === 'online') {
        handleOnlineClick(index);
    }
}

// –û—Ñ—Ñ–ª–∞–π–Ω –∫–ª–∏–∫
function handleOfflineClick(index) {
    const card = document.querySelector(`[data-index="${index}"]`);
    const state = gameState.offlineState;

    // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–ª–∏–∫–∏ –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
    if (gameState.isTransitioning) return;
    if (card.classList.contains('flipped') || card.classList.contains('animating')) return;

    if (state.gamePhase === 'placing_bombs') {
        const bombs = state.bombs;

        if (bombs.includes(index)) {
            // –û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ –±–æ–º–±—ã
            state.bombs = bombs.filter(b => b !== index);
            flipBombPreview(index);
        } else if (bombs.length < 2) {
            // –í—ã–±–æ—Ä –±–æ–º–±—ã
            state.bombs.push(index);
            flipBombPreview(index);

            if (state.bombs.length === 2) {
                // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–ª–∏–∫–∏ –¥–æ –∫–æ–Ω—Ü–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞
                gameState.isTransitioning = true;

                // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ñ–∞–∑–µ —É–≥–∞–¥—ã–≤–∞–Ω–∏—è —Å –≤–æ–ª–Ω–æ–≤—ã–º —ç—Ñ—Ñ–µ–∫—Ç–æ–º
                const timeoutId1 = setTimeout(() => {
                    // –í–ê–ñ–ù–û: –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∏–≥—Ä–æ–∫–∞ (–∫—Ç–æ —Å—Ç–∞–≤–∏–ª –±–æ–º–±—ã, —Ç–æ—Ç –ù–ï —É–≥–∞–¥—ã–≤–∞–µ—Ç)
                    state.currentPlayer = state.currentPlayer === 1 ? 2 : 1;
                    state.gamePhase = 'guessing';
                    transitionTheme('light', 'dark');
                    const timeoutId2 = setTimeout(() => {
                        updatePlayersDisplay();
                        updateStatus('üéØ –ù–∞–π–¥–∏ 3 –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö!');
                        const timeoutId3 = setTimeout(() => {
                            gameState.isTransitioning = false;
                        }, TIMINGS.CLICK_UNBLOCK);
                        gameState.activeTimeouts.push(timeoutId3);
                    }, 400);
                    gameState.activeTimeouts.push(timeoutId2);
                }, TIMINGS.PLACE_TO_GUESS_DELAY);
                gameState.activeTimeouts.push(timeoutId1);
            }
        }
    } else if (state.gamePhase === 'guessing') {
        const isBomb = state.bombs.includes(index);
        flipCardVisual(index, isBomb);

        if (isBomb) {
            // –ü–æ–ø–∞–ª –Ω–∞ –±–æ–º–±—É - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–ë–æ–º–±–∞!" —Å—Ä–∞–∑—É
            updateStatus('üí• –ë–æ–º–±–∞!');
            gameState.isTransitioning = true;
            const timeoutId = setTimeout(() => endRoundOffline(false), TIMINGS.END_ROUND_INITIAL);
            gameState.activeTimeouts.push(timeoutId);
        } else {
            state.selectedCells.push(index);

            if (state.selectedCells.length === 3) {
                // –í—ã–±—Ä–∞–ª 3 –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ - –ø–æ–±–µ–¥–∞
                gameState.isTransitioning = true;
                const timeoutId = setTimeout(() => endRoundOffline(true), TIMINGS.END_ROUND_INITIAL);
                gameState.activeTimeouts.push(timeoutId);
            }
        }
    }
}

// –û–Ω–ª–∞–π–Ω –∫–ª–∏–∫
async function handleOnlineClick(index) {
    const card = document.querySelector(`[data-index="${index}"]`);

    // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–ª–∏–∫–∏ –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
    if (gameState.isTransitioning) return;

    const snapshot = await gameState.roomRef.once('value');
    const room = snapshot.val();

    if (!room || card.classList.contains('flipped') || card.classList.contains('animating')) return;

    const isMyTurn = (room.currentPlayer === 1 && gameState.playerRole === 'player1') ||
                     (room.currentPlayer === 2 && gameState.playerRole === 'player2');

    if (!isMyTurn) return;

    if (room.gamePhase === 'placing_bombs') {
        const bombs = room.bombs || [];
        const flippedPreview = room.flippedPreview || [];

        if (bombs.includes(index)) {
            // –û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ –±–æ–º–±—ã
            const newBombs = bombs.filter(b => b !== index);
            const newPreview = flippedPreview.filter(p => p !== index);
            await gameState.roomRef.update({
                bombs: newBombs,
                flippedPreview: newPreview
            });
            flipBombPreview(index);
        } else if (bombs.length < 2) {
            // –í—ã–±–æ—Ä –±–æ–º–±—ã - –¥–æ–±–∞–≤–ª—è–µ–º –≤ preview –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            const newBombs = [...bombs, index];
            const newPreview = [...flippedPreview, index];
            await gameState.roomRef.update({
                bombs: newBombs,
                flippedPreview: newPreview
            });
            flipBombPreview(index);

            if (newBombs.length === 2) {
                // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ñ–∞–∑–µ —É–≥–∞–¥—ã–≤–∞–Ω–∏—è (–≤–æ–ª–Ω–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
                const timeoutId = setTimeout(async () => {
                    try {
                        const nextPlayer = room.currentPlayer === 1 ? 2 : 1;
                        await gameState.roomRef.update({
                            gamePhase: 'guessing',
                            currentPlayer: nextPlayer,
                            flippedCards: [],
                            flippedPreview: []
                        });
                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã —Ñ–∞–∑—ã:', error);
                    }
                }, TIMINGS.PLACE_TO_GUESS_DELAY);
                gameState.activeTimeouts.push(timeoutId);
            }
        }
    } else if (room.gamePhase === 'guessing') {
        const bombs = room.bombs || [];
        const selectedCells = room.selectedCells || [];
        const flippedCards = room.flippedCards || [];

        const isBomb = bombs.includes(index);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º transaction –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è race conditions
        const flippedCardsRef = gameState.roomRef.child('flippedCards');
        await flippedCardsRef.transaction((current) => {
            if (!current) current = [];
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–∞ –∫–∞—Ä—Ç–∞ –µ—â–µ –Ω–µ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞
            if (current.find(c => c.index === index)) {
                return; // Abort transaction
            }
            current.push({ index, isBomb });
            return current;
        });

        if (isBomb) {
            // –ü–æ–ø–∞–ª –Ω–∞ –±–æ–º–±—É - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–ë–æ–º–±–∞!" —Å—Ä–∞–∑—É –æ–±–æ–∏–º –∏–≥—Ä–æ–∫–∞–º
            gameState.isTransitioning = true;
            await gameState.roomRef.update({
                showBombMessage: true,
                roundEndTriggered: true, // –§–ª–∞–≥ —á—Ç–æ —Ä–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è
                roundWinner: false
            });
        } else {
            const newSelectedCells = [...selectedCells, index];
            await gameState.roomRef.child('selectedCells').set(newSelectedCells);

            if (newSelectedCells.length === 3) {
                // –í—ã–±—Ä–∞–ª 3 –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ - –ø–æ–±–µ–¥–∞
                gameState.isTransitioning = true;
                await gameState.roomRef.update({
                    roundEndTriggered: true, // –§–ª–∞–≥ —á—Ç–æ —Ä–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è
                    roundWinner: true
                });
            }
        }
    }
}

// –ü—Ä–µ–≤—å—é –±–æ–º–±—ã –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ
function flipBombPreview(index) {
    const card = document.querySelector(`[data-index="${index}"]`);
    if (!card) return;
    const back = card.querySelector('.card-back');

    card.classList.add('animating');

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ä–∞–∑—É (–æ–Ω–æ —Å–∫—Ä—ã—Ç–æ —á–µ—Ä–µ–∑ opacity: 0)
    back.classList.add('bomb');
    back.textContent = 'üí£';

    // –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º –∫–∞–¥—Ä–µ
    requestAnimationFrame(() => {
        card.classList.add('flipped');
    });

    // –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ —á–µ—Ä–µ–∑ 1000–º—Å
    const timeoutId1 = setTimeout(() => {
        card.classList.remove('flipped');

        // –û—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞
        const timeoutId2 = setTimeout(() => {
            back.className = 'card-face card-back';
            back.textContent = '';
            card.classList.remove('animating');
        }, TIMINGS.CARD_FLIP);
        gameState.activeTimeouts.push(timeoutId2);
    }, TIMINGS.BOMB_PREVIEW);
    gameState.activeTimeouts.push(timeoutId1);
}

// –í–∏–∑—É–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
function flipCardVisual(index, isBomb) {
    const card = document.querySelector(`[data-index="${index}"]`);
    if (!card) return;
    const back = card.querySelector('.card-back');

    if (card.classList.contains('flipped') || card.classList.contains('animating')) return;

    card.classList.add('animating');

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ä–∞–∑—É (–æ–Ω–æ —Å–∫—Ä—ã—Ç–æ —á–µ—Ä–µ–∑ opacity: 0)
    if (isBomb) {
        back.classList.add('bomb');
        back.textContent = 'üí£';
    } else {
        back.classList.add('safe');
        back.textContent = '‚úÖ';
    }

    // –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º –∫–∞–¥—Ä–µ
    requestAnimationFrame(() => {
        card.classList.add('flipped');
    });

    const timeoutId = setTimeout(() => {
        card.classList.remove('animating');
    }, TIMINGS.CARD_FLIP);
    gameState.activeTimeouts.push(timeoutId);
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞—É–Ω–¥–∞ (–æ—Ñ—Ñ–ª–∞–π–Ω)
function endRoundOffline(won) {
    const state = gameState.offlineState;

    const timeoutId1 = setTimeout(() => {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –±–æ–º–±—ã
        state.bombs.forEach(bombIndex => {
            const card = document.querySelector(`[data-index="${bombIndex}"]`);
            if (!card.classList.contains('flipped')) {
                flipCardVisual(bombIndex, true);
            }
        });

        // –ñ–¥–µ–º –ø–æ–∫–∞ –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—Å—è (600–º—Å –∞–Ω–∏–º–∞—Ü–∏—è + –±—É—Ñ–µ—Ä)
        const timeoutId2 = setTimeout(() => {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç
            // currentPlayer - —Ç–æ—Ç –∫—Ç–æ –£–ì–ê–î–´–í–ê–ï–¢ (–∫–∞–∫ –≤ –æ–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ)
            if (won) {
                // –£–≥–∞–¥—ã–≤–∞—é—â–∏–π –≤—ã–∏–≥—Ä–∞–ª (–≤—ã–±—Ä–∞–ª 3 –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ)
                if (state.currentPlayer === 1) state.scores.player1++;
                else state.scores.player2++;
            } else {
                // –£–≥–∞–¥—ã–≤–∞—é—â–∏–π –ø—Ä–æ–∏–≥—Ä–∞–ª (–ø–æ–ø–∞–ª –Ω–∞ –±–æ–º–±—É) - –æ—á–∫–æ –∑–∞–∫–ª–∞–¥—ã–≤–∞–≤—à–µ–º—É
                if (state.currentPlayer === 1) state.scores.player2++;
                else state.scores.player1++;
            }

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–∑—É "–∫–æ–Ω–µ—Ü —Ä–∞—É–Ω–¥–∞" —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —Ä–∞–º–∫—É
            state.gamePhase = 'round_end';
            updatePlayersDisplay();
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
            updateStatus(won ? 'üéâ –ü–æ–±–µ–¥–∞!' : 'üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–µ!');

            // –ù–æ–≤—ã–π —Ä–∞—É–Ω–¥ —á–µ—Ä–µ–∑ 2.5 —Å–µ–∫—É–Ω–¥—ã
            const timeoutId3 = setTimeout(() => {
                // –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ
                resetBoardVisual();

                // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞ –∏ –∑–∞—Ç–µ–º –º–µ–Ω—è–µ–º —Ç–µ–º—É
                const timeoutId4 = setTimeout(() => {
                    // –ù–ï –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∏–≥—Ä–æ–∫–∞! –ö—Ç–æ —É–≥–∞–¥—ã–≤–∞–ª (currentPlayer), —Ç–æ—Ç —Ç–µ–ø–µ—Ä—å –∑–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç
                    state.gamePhase = 'placing_bombs';
                    state.bombs = [];
                    state.selectedCells = [];

                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ light —Ç–µ–º–µ
                    transitionTheme('dark', 'light');

                    const timeoutId5 = setTimeout(() => {
                        updatePlayersDisplay();
                        updateStatus('üí£ –ó–∞–º–∏–Ω–∏—Ä—É–π 2 –∫–ª–µ—Ç–∫–∏');
                        gameState.isTransitioning = false;
                    }, TIMINGS.THEME_TRANSITION + 100);
                    gameState.activeTimeouts.push(timeoutId5);
                }, TIMINGS.CARD_FLIP);
                gameState.activeTimeouts.push(timeoutId4);
            }, TIMINGS.ROUND_END_DELAY);
            gameState.activeTimeouts.push(timeoutId3);
        }, 700);
        gameState.activeTimeouts.push(timeoutId2);
    }, TIMINGS.END_ROUND_INITIAL);
    gameState.activeTimeouts.push(timeoutId1);
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞—É–Ω–¥–∞ (–æ–Ω–ª–∞–π–Ω)
async function endRoundOnline(won, bombs) {
    const timeoutId1 = setTimeout(async () => {
        try {
            const snapshot = await gameState.roomRef.once('value');
            const room = snapshot.val();
            if (!room) return;

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –±–æ–º–±—ã
            const flippedCards = room.flippedCards || [];
            const updatedFlippedCards = [...flippedCards];
            bombs.forEach(bombIndex => {
                if (!updatedFlippedCards.find(c => c.index === bombIndex)) {
                    updatedFlippedCards.push({ index: bombIndex, isBomb: true });
                }
            });
            
            await gameState.roomRef.child('flippedCards').set(updatedFlippedCards);

            const timeoutId2 = setTimeout(async () => {
                try {
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç
                    const scores = { ...room.scores };
                    if (won) {
                        if (room.currentPlayer === 1) scores.player1++;
                        else scores.player2++;
                    } else {
                        if (room.currentPlayer === 1) scores.player2++;
                        else scores.player1++;
                    }

                    await gameState.roomRef.update({
                        gamePhase: 'round_end',
                        winner: won,
                        scores: scores,
                        showBombMessage: false // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
                    });

                    // –ù–æ–≤—ã–π —Ä–∞—É–Ω–¥
                    const timeoutId3 = setTimeout(async () => {
                        try {
                            await gameState.roomRef.update({
                                gamePhase: 'resetting'
                            });
                            
                            const timeoutId4 = setTimeout(async () => {
                                try {
                                    await gameState.roomRef.update({
                                        gamePhase: 'placing_bombs',
                                        bombs: [],
                                        selectedCells: [],
                                        flippedCards: [],
                                        flippedPreview: [],
                                        roundEndTriggered: false,
                                        roundWinner: null
                                    });
                                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
                                    gameState.roundEndProcessed = false;
                                } catch (error) {
                                    console.error('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞:', error);
                                }
                            }, TIMINGS.CARD_FLIP);
                            gameState.activeTimeouts.push(timeoutId4);
                        } catch (error) {
                            console.error('–û—à–∏–±–∫–∞ resetting:', error);
                        }
                    }, TIMINGS.ROUND_END_DELAY);
                    gameState.activeTimeouts.push(timeoutId3);
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç–∞:', error);
                }
            }, 700);
            gameState.activeTimeouts.push(timeoutId2);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –±–æ–º–±:', error);
        }
    }, TIMINGS.END_ROUND_INITIAL);
    gameState.activeTimeouts.push(timeoutId1);
}

// –°–±—Ä–æ—Å –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—è
function resetBoardVisual() {
    const cards = document.querySelectorAll('.card');
    
    cards.forEach(card => {
        // –£–±–∏—Ä–∞–µ–º flipped - –∫–∞—Ä—Ç–æ—á–∫–∞ –Ω–∞—á–Ω–µ—Ç –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ
        card.classList.remove('flipped', 'selected', 'locked');
        card.classList.add('hoverable', 'wobble');
    });
    
    // –û–¥–∏–Ω –æ–±—â–∏–π —Ç–∞–π–º–µ—Ä –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ä—Ç –≤–º–µ—Å—Ç–æ 9 –æ—Ç–¥–µ–ª—å–Ω—ã—Ö
    const timeoutId = setTimeout(() => {
        cards.forEach(card => {
            card.classList.remove('animating');
            const back = card.querySelector('.card-back');
            if (back) {
                back.className = 'card-face card-back';
                back.textContent = '';
            }
        });
    }, TIMINGS.CARD_FLIP);
    
    gameState.activeTimeouts.push(timeoutId);
    
    // –û—á–∏—â–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–µ–≤—å—é –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞
    if (gameState.shownPreviews) {
        gameState.shownPreviews.clear();
    }
}

// –í—ã—Ö–æ–¥ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã (–æ–Ω–ª–∞–π–Ω)
async function leaveRoom() {
    // –û—á–∏—â–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã
    gameState.activeTimeouts.forEach(timeoutId => clearTimeout(timeoutId));
    gameState.activeTimeouts = [];

    if (gameState.roomRef) {
        try {
            // –û—Ç–∫–ª—é—á–∞–µ–º listener
            gameState.roomRef.off();
            
            // –í–ê–ñ–ù–û: –û—Ç–º–µ–Ω—è–µ–º onDisconnect —Ö—É–∫–∏ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
            if (gameState.playerRole === 'player1') {
                await gameState.roomRef.child('player1/connected').onDisconnect().cancel();
                await gameState.roomRef.child('player1/connected').set(false);
            } else if (gameState.playerRole === 'player2') {
                await gameState.roomRef.child('player2/connected').onDisconnect().cancel();
                await gameState.roomRef.child('player2/connected').set(false);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã:', error);
        }
        
        gameState.roomRef = null;
    }

    gameState.roomCode = null;
    gameState.playerRole = null;
    gameState.gameMode = null;
    gameState.lastGamePhase = null;
    gameState.isTransitioning = false;
    gameState.isTransitioningTheme = false;
    gameState.opponentDisconnectHandled = false;
    gameState.roundEndProcessed = false;
    if (gameState.shownPreviews) {
        gameState.shownPreviews.clear();
    }

    resetBoardVisual();
    resetLobby();
    showScreen('lobby');
    setTheme('light');
}

// –í—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã
function leaveGame() {
    // –û—á–∏—â–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã –¥–ª—è –æ–±–æ–∏—Ö —Ä–µ–∂–∏–º–æ–≤
    gameState.activeTimeouts.forEach(timeoutId => clearTimeout(timeoutId));
    gameState.activeTimeouts = [];
    
    if (gameState.gameMode === 'offline') {
        gameState.offlineState = {
            gamePhase: 'placing_bombs',
            bombs: [],
            selectedCells: [],
            currentPlayer: 1,
            scores: { player1: 0, player2: 0 }
        };
        gameState.gameMode = null;
        gameState.isTransitioning = false;
        gameState.isTransitioningTheme = false;
        gameState.opponentDisconnectHandled = false;
        gameState.roundEndProcessed = false;
        resetBoardVisual();
        resetLobby();
        showScreen('lobby');
        setTheme('light');
    } else if (gameState.gameMode === 'online') {
        leaveRoom();
    }
}

// –°–±—Ä–æ—Å –ª–æ–±–±–∏
function resetLobby() {
    elements.modeSelection.style.display = 'flex';
    elements.onlineOptions.classList.remove('expanded');
}


// ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========

function showScreen(screenName) {
    Object.values(screens).forEach(screen => screen.classList.remove('active'));
    screens[screenName].classList.add('active');
    gameState.currentScreen = screenName;
}

function generateRoomCode() {
    return Math.floor(1000 + Math.random() * 9000).toString();
}

function updateStatus(text) {
    elements.gameStatus.textContent = text;
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', init);
